
DROP TABLE IF EXISTS PUBLIC.USER cascade;
DROP TABLE IF EXISTS PUBLIC.CATEGORY cascade;
DROP TABLE IF EXISTS PUBLIC.LOCATION cascade;
DROP TABLE IF EXISTS PUBLIC.REQUEST cascade;
DROP TABLE IF EXISTS PUBLIC.EVENT cascade;
DROP TABLE IF EXISTS PUBLIC.COMPILATION cascade;
DROP TABLE IF EXISTS PUBLIC.COMPILATION_EVENT cascade;
DROP TABLE IF EXISTS PUBLIC.EVENT_CATEGORY cascade;
DROP TABLE IF EXISTS PUBLIC.LOCATION_ADMIN cascade;

-- создаем первой 1
CREATE TABLE IF NOT EXISTS PUBLIC.USER (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                name VARCHAR(300) NOT NULL,
                                email VARCHAR(500) NOT NULL,
                                CONSTRAINT users_pk_id PRIMARY KEY (id),
                                CONSTRAINT uq_user_email UNIQUE (email)
                                );

-- создаем до EVENT
CREATE TABLE IF NOT EXISTS PUBLIC.CATEGORY (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                name VARCHAR(500) NOT NULL,
                                CONSTRAINT category_pk_id PRIMARY KEY (id)
                                );

-- создаем до EVENT
CREATE TABLE IF NOT EXISTS PUBLIC.LOCATION (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                lat REAL NOT NULL,
                                lon REAL NOT NULL,
                                CONSTRAINT location_pk_id PRIMARY KEY (id)
                                );

CREATE TABLE IF NOT EXISTS PUBLIC.EVENT (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                category_id BIGINT,
                               	created TIMESTAMP,
                               	description CHARACTER(7500),
                               	event_date TIMESTAMP NOT NULL,
                               	annotation CHARACTER(2500),
                               	initiator_id BIGINT,
                               	location_id BIGINT,
                               	paid BOOLEAN,
                               	participant_limit BIGINT,
                               	published TIMESTAMP,
                               	request_moderation BOOLEAN,
                               	state CHARACTER(50),
                               	title CHARACTER(1000),
                                CONSTRAINT event_pk_id PRIMARY KEY (id),
                                CONSTRAINT event_fk_category_id FOREIGN KEY (category_id) REFERENCES PUBLIC.CATEGORY(id) ON DELETE SET NULL,
                                CONSTRAINT event_fk_initiator_id FOREIGN KEY (initiator_id) REFERENCES PUBLIC.USER(id) ON DELETE SET NULL,
                                CONSTRAINT event_fk_location_id FOREIGN KEY (location_id) REFERENCES PUBLIC.LOCATION(id) ON DELETE SET NULL
                               );

-- создаем после EVENT
CREATE TABLE IF NOT EXISTS PUBLIC.REQUEST (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                               	created TIMESTAMP,
                               	requester_id BIGINT,
                               	event_id BIGINT,
                               	status CHARACTER(50),
                                CONSTRAINT request_pk_id PRIMARY KEY (id),
                                CONSTRAINT request_fk_requester_id FOREIGN KEY (requester_id) REFERENCES PUBLIC.USER(id) ON DELETE SET NULL,
                                CONSTRAINT request_fk_event_id FOREIGN KEY (event_id) REFERENCES PUBLIC.EVENT(id) ON DELETE SET NULL
                               );

CREATE TABLE IF NOT EXISTS PUBLIC.COMPILATION (
                                id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                title CHARACTER(100),
                                pinned BOOLEAN,
                                CONSTRAINT compilation_pk_id PRIMARY KEY (id)
                                );

CREATE TABLE IF NOT EXISTS PUBLIC.COMPILATION_EVENT (
                                comp_id BIGINT,
                                event_id BIGINT,
                                CONSTRAINT compilation_event_pk_comp_id_event_id PRIMARY KEY (comp_id,event_id),
                                CONSTRAINT compilation_event_fk_comp_id FOREIGN KEY (comp_id) REFERENCES PUBLIC.COMPILATION(id) ON DELETE SET NULL,
                                CONSTRAINT compilation_event_fk_event_id FOREIGN KEY (event_id) REFERENCES PUBLIC.EVENT(id) ON DELETE SET NULL
                                );

CREATE TABLE IF NOT EXISTS PUBLIC.EVENT_CATEGORY (
                                event_id BIGINT,
                                category_id BIGINT,
                                CONSTRAINT event_category_pk_event_id_category_id PRIMARY KEY (event_id,category_id),
                                CONSTRAINT event_category_fk_comp_id FOREIGN KEY (event_id) REFERENCES PUBLIC.EVENT(id) ON DELETE SET NULL,
                                CONSTRAINT event_category_fk_event_id FOREIGN KEY (category_id) REFERENCES PUBLIC.CATEGORY(id) ON DELETE SET NULL
                                );

CREATE TABLE IF NOT EXISTS PUBLIC.LOCATION_ADMIN (
                                la_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                                name CHARACTER(100) NOT NULL,
                                location_id BIGINT,
                                CONSTRAINT location_admin_pk_id PRIMARY KEY (la_id),
                                CONSTRAINT location_admin_fk_location_id FOREIGN KEY (location_id) REFERENCES PUBLIC.LOCATION(id) ON DELETE SET NULL
                                );



CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;
